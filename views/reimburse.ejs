<main>
    <div x-data="{
        transactionLog : [],
        toBeReimbursed : [],
        grid : null,
        grid2 : null,
        reimbursedTotal: 0,
        init(){
            fetch('/transactions')
                .then(data => data.json())
                .then(js => Alpine.raw(js.transactions))
                .then(transactions =>
                    {
                        this.grid = agGrid.createGrid(this.$refs.myGrid, {
                            rowData : transactions,
                            domLayout: 'autoHeight',
                            columnDefs : [
                                { field: 'transactionId', checkboxSelection: true},
                                { field: 'description'},
                                { field: 'amount' },
                                { field: 'recipient' },
                                { field: 'createdBy' },
                                { field: 'date'}
                            ],
                            defaultColDef: {
                                filter: 'agTextColumnFilter',
                                floatingFilter: true,
                            },
                            rowSelection: 'multiple',
                            onRowSelected: (event) => {
                                if (event.node.isSelected()) {
                                    this.toBeReimbursed.push(event.node.data);
                                    this.reimbursedTotal = this.reimbursedTotal + Number(event.node.data.amount);
                                    this.grid2.setRowData([...this.toBeReimbursed, {description: 'Total', amount : this.reimbursedTotal}])
                                    this.grid2.refreshCells()
                                    return
                                }
    
                                const index = this.toBeReimbursed.indexOf(event.node.data);
                                if (index < 0) {
                                    return
                                }
                                this.toBeReimbursed.splice(index, 1);
                                this.reimbursedTotal = this.reimbursedTotal - Number(event.node.data.amount);
                                let toBeReimbursed = [...this.toBeReimbursed]
                                if (this.reimbursedTotal > 0) {
                                    toBeReimbursed.push({description: 'Total', amount : this.reimbursedTotal})
                                }
                                this.grid2.setRowData(toBeReimbursed);
                                this.grid2.refreshCells()
                            }
                        })
                    this.grid2 = agGrid.createGrid(this.$refs.myGrid2, {
                        rowData : this.toBeReimbursed,
                        domLayout: 'autoHeight',
                        columnDefs : [
                            { field: 'description'},
                            { field: 'amount' },
                            { field: 'recipient' },
                            { field: 'createdBy' },
                            { field: 'date'}
                        ],
                        defaultColDef: {
                            filter: 'agTextColumnFilter',
                            floatingFilter: true,
                        },
                        getRowStyle: function(params) {
                            if (params.node.rowIndex === params.api.getDisplayedRowCount() - 1) {
                                return { background: '#5290e8', fontWeight: 'bold', color: 'white' };
                            }
                            return null;
                        },
                    })
                }
                )
    
            htmx.on('#reimburse_button', 'click', (event) => {
                htmx.ajax('POST', '/reimburseBalance', {
                    target: 'main', 
                    swap:'outerHTML', 
                    values:{
                        toBeReimbursed: JSON.stringify(this.toBeReimbursed),
                        reimbursedTotal : this.reimbursedTotal,
                    } 
                })
            })

        },
        sendReimbursedTotal(reimbursedTotal, toBeReimbursed) {
            fetch('/reimburseBalance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    reimbursedTotal,
                    toBeReimbursed
                }),
            });
            console.log('Sending reimbursed total')
        },
        createBalanceRow(balance) {
            return {
                balance
            }
        }
    }">
    
    
        <div style="display: flex">
            <div style="flex: 1; margin-right: 20px">
                <h2>Transactions</h2>
                <div x-ref="myGrid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto"></div>
            </div>
            <div style="flex: 1;">
                <div x-show="toBeReimbursed.length > 0">
                    <h2>To Be Reimbursed</h2>
                    <div x-ref="myGrid2" id="myGrid2" class="table ag-theme-quartz ag-center-cols-viewport"></div>
                    <button id="reimburse_button" type="button">Reimburse</button>
                </div>
            </div>
        </div>
    </div>
</main>