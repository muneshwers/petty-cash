<main x-ref="main" class="swappable">
    <div x-data="{
        saveText : 'Save',
        transactionLog : [],
        toBeReimbursed : [],
        saved : [],
        grid : null,
        grid2 : null,
        reimbursedTotal: 0,
        async init(){
            const actionRenderer = function(params) {
                let transaction = params.data
                const container = document.createElement('div');
                container.classList.add('action-container');

                if (transaction.editable) {
                    const editButton = document.createElement('button')
                    editButton.classList.add('action-button')
                    editButton.title = 'Edit'
                    const icon = document.createElement('i')
                    icon.classList.add('fas')
                    icon.classList.add('fa-pen-to-square')
                    editButton.appendChild(icon)
                    editButton.addEventListener('click', () => {
                        $dispatch('modal', {transaction}); 
                    })

                    container.appendChild(editButton)
                }

                if (transaction.deleteable) {
                    const deleteButton = document.createElement('button')
                    deleteButton.classList.add('action-button')
                    deleteButton.title = 'Delete'
                    const icon = document.createElement('i')
                    icon.classList.add('fa-solid')
                    icon.classList.add('fa-xmark')
                    deleteButton.appendChild(icon)
                    deleteButton.addEventListener('click', () => {
                        $dispatch('delete-modal', {transaction, url : '/transaction/delete'});
                    })

                    container.appendChild(deleteButton)
                }

                if (transaction.timeStamp) {
                    const queryButton= document.createElement('button')
                    queryButton.classList.add('action-button')
                    queryButton.title = 'Query'
                    const icon = document.createElement('i')
                    icon.classList.add('fa-solid')
                    icon.classList.add('fa-question')
                    queryButton.appendChild(icon)
                    queryButton.addEventListener('click', () => {
                        $dispatch('query-modal', {transaction})
                    })

                    container.appendChild(queryButton)
                }

                if (transaction) {
                    const uploadButton= document.createElement('button')
                    uploadButton.classList.add('action-button')
                    uploadButton.title = 'Upload'
                    const icon = document.createElement('i')
                    icon.classList.add('fa-solid')
                    icon.classList.add('fa-receipt')
                    uploadButton.appendChild(icon)
                    uploadButton.addEventListener('click', () => {
                        $dispatch('upload-modal', {transaction});
                    })

                    container.appendChild(uploadButton)
                }
                return container;
            }
            
            let {transactions} = (await (await fetch('/transactions')).json())
            let {savedOnAccount} = (await (await fetch('/saved')).json())
            this.saved = savedOnAccount
            this.grid = agGrid.createGrid(this.$refs.myGrid, {
                rowData : transactions,
                domLayout: 'autoHeight',
                components: {actionRenderer},
                columnDefs : [
                    { field: 'transactionId', 
                    checkboxSelection: function (params) {
                        return params.data.approved
                        },
                    sortable: false,
                    headerCheckboxSelection: true,
                    headerName : 'Voucher Number'},
                    { field: 'description'},
                    { field: 'amount' },
                    { field : 'approved'},
                    { field: 'recipient' },
                    { field: 'supplier' },
                    { field: 'createdBy' },
                    { field: 'date'},
                    { field: 'timeStamp' },
                    { field: 'imageUrl',
                        hide: true
                    },
                    { 
                        field: 'Actions',
                        headerName: 'Actions',
                        cellRenderer: 'actionRenderer',
                        minWidth: 150,
                        suppressHeaderMenuButton: true,
                        cellStyle: { textAlign: 'center' }
                    },
                ],
                defaultColDef: {
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                    width: 120,
                },
                rowSelection: 'multiple',
                isRowSelectable: function(params) {
                    return params.data.approved
                },
                onRowSelected: (event) => {
                    this.saveText = 'Save'
                    if (event.node.isSelected()) {
                        this.toBeReimbursed.push(event.node.data);
                        this.reimbursedTotal = this.reimbursedTotal + Number(event.node.data.amount);
                        this.grid2.setRowData([...this.toBeReimbursed, {description: 'Total', amount : this.reimbursedTotal}])
                        this.grid2.refreshCells()
                        return
                    }

                    const index = this.toBeReimbursed.indexOf(event.node.data);
                    if (index < 0) {
                        return
                    }
                    this.toBeReimbursed.splice(index, 1);
                    this.reimbursedTotal = this.reimbursedTotal - Number(event.node.data.amount);
                    let toBeReimbursed = [...this.toBeReimbursed]
                    if (this.reimbursedTotal > 0) {
                        toBeReimbursed.push({description: 'Total', amount : this.reimbursedTotal})
                    }
                    this.grid2.setRowData(toBeReimbursed);
                    this.grid2.refreshCells()
                },
                onFirstDataRendered : (params) => {
                    const selectedNodes = []
                    let saved = this.saved.map(id => Number(id)).sort((a,b) => a-b)
                    console.log(saved)
                    let currentIndex = 0
                    params.api.forEachNode((node) => {
                        let id = node.data.transactionId
                        while (id > saved[currentIndex] && currentIndex < saved.length) {
                            ++currentIndex
                        }
                        if (id == saved[currentIndex]){
                            selectedNodes.push(node)
                            ++currentIndex
                            return
                        }
                        if (id < saved[currentIndex]){
                            return
                        }
                    })
                    params.api.setNodesSelected({ nodes : selectedNodes,  newValue : true})
                },
            })
            let account = this.accountTextMap[this.currAccount]
            this.grid2 = agGrid.createGrid(this.$refs.myGrid2, {
                rowData : this.toBeReimbursed,
                domLayout: 'autoHeight',
                columnDefs : [
                    { field: 'description'},
                    { field: 'amount' },
                    {field: 'transactionId', headerName : 'Voucher Number'},
                    { field: 'recipient' },
                    { field: 'supplier' },
                    { field: 'createdBy' },
                    { field: 'date'},
                    { field: 'approvedBy'},
                    { field: 'approvedTime'},
                    {headerName: 'Account', valueGetter: function (params) {
                        return account 
                    },}
                ],
                defaultColDef: {
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                },
                getRowStyle: function(params) {
                    if (params.node.rowIndex === params.api.getDisplayedRowCount() - 1) {
                        return { fontWeight: 'bold', color : '#0047ab'}
                    }
                    return null;
                },
            })
    
            htmx.on('#reimburse_button', 'click', (event) => {
                this.swapMain()
                setTimeout(() => {
                    htmx.ajax('POST', '/transaction/reimburse', {
                        target: 'main', 
                        swap:'outerHTML', 
                        values:{
                            toBeReimbursed: JSON.stringify(this.toBeReimbursed),
                            reimbursedTotal : this.reimbursedTotal,
                        } 
                    })
                }, 250);
            })
        },
        exportTableAsCsv() {
            let account = this.currAccount
            console.log(account)
            let accountToCodeMap = {
                muneshwers : 'ML',
                barges : 'BS',
                paragon : 'PT',
                meals : 'M'
            }
            let code = accountToCodeMap[account]
            const processCellCallback = (params) => {                
                if (params.column.getId() === 'transactionId' ){
                    if (params.value){
                        return code + params.value
                    }
                    return
                }
                return params.value
            }
            this.grid2.exportDataAsCsv({processCellCallback})
        },
        save() {
            let toSave = this.toBeReimbursed.map(node => node.transactionId)
            fetch('/saved', {
                method: 'POST',
                headers: {
                    'Content-Type' : 'application/json',
                },
                body: JSON.stringify({toSave})
            }).then((data) => {
                this.saveText = '✓' + ' Saved'
            })
        }
    }">
        <div class="reimburse_container">
            <div class="section1">
                <h2>Current Transactions</h2>
                <div x-ref="myGrid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto"></div>
            </div>
            <div class="section2">
                    <div>
                        <div class="title" >
                            <h2>Reimbursements</h2>
                            <div class="title_btns">
                                <button type="button" class="export_btn" @click="exportTableAsCsv()">
                                    <img src="/static/images/download.svg" alt="download button" height="25" width="25">
                                </button>
                                <button type="button" class="reverse" @click="save()" x-text="saveText"></button>
                            </div>
                        </div>
                        <div x-ref="myGrid2" id="myGrid2" class="table ag-theme-quartz ag-center-cols-viewport"></div>
                        <div class="table_btns" x-show="toBeReimbursed.length > 0">
                            <button id="reimburse_button" class="reverse" type="button">Reimburse</button>
                        </div>
                    </div>
            </div>
        </div>
    
        <div id="edit-modal"
            x-data="{  
                openEditModal: false,
                inputs : {
                    transactionId : {value: '', valid: true},
                    amount :  {value: '', valid: true},
                    recipient : {value: '', valid: true},
                    supplier : {value: '', valid: true},
                    description : {value: '', valid: true},
                    date : {value: '', valid: true},
                    originalAmount :  {value: '', valid: true},
                },
                validateEdit() {
                    let keys = Object.keys(this.inputs)
                    for (let key of keys) {
                        if (!this.inputs[key].valid) {
                            return false
                        }
                    }
                    return true
                },
                balance: 1000000,
                }"
            x-init=" fetch('/balance').then(data => data.json()).then(json => balance = json.balance)"
            @modal.window="
                balance -= (inputs.originalAmount.value) ? Number(inputs.originalAmount.value) : 0
                openEditModal = true
                let transaction = $event.detail.transaction
                inputs.transactionId.value =transaction.transactionId
                inputs.recipient.value = transaction.recipient
                inputs.supplier.value = transaction.supplier
                inputs.description.value = transaction.description
                inputs.originalAmount.value = transaction.amount
                inputs.date.value = transaction.date
                inputs.amount.value = ''
                balance += Number(inputs.originalAmount.value)
            "
            >
            <div x-show="openEditModal" class="overlay">
                <div class="modal" @click.outside="openEditModal = false">
                    <button class="close-button" @click="openEditModal = false">&times;</button>
                    <h2> Edit Transaction </h2>
                    <div x-data="{
                        editAmount: false,
                        formatDollar(number) {
                            return new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency : 'USD',
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0,
                            }).format(number)
                        }
                    }"
                    @modal.window="editAmount=false"
                    >
                        <div class="amount-box" x-show="editAmount" x-transition:enter.delay.300ms.duration.300ms>
                            <div class="amount"><div>New Balance </div> <span style="color: green;"  x-text="formatDollar(balance)" ></span></div>
                            <div class="amount"><div>New Amount </div> <span style="color: red;" x-text="formatDollar(Math.abs(inputs.amount.value) || 0)"></span></div>
                            <div class="amount"><div>New Remainder </div> <span  x-text="formatDollar(balance - inputs.amount.value)" ></span></div>
                        </div>

                        <form :class="{'movedown' : editAmount}" hx-post="/transaction/edit" hx-target="main" hx-trigger="submit delay:0.25s">
                            <div class="edit-form">
                                <div class="item">
                                    <span class="errorMessage"></span>
                                    <input type="text" readonly name="transactionId" id="transactionId" x-model="inputs.transactionId.value">
                                    <span class="label">Voucher Number</span>
                                </div>
                                <div
                                    @validation="
                                        inputs[$event.detail.field].value = $event.detail.input;
                                        inputs[$event.detail.field].valid = $event.detail.valid;"
                                    class="item"
                                    x-data="{
                                        input : '',
                                        errorMessage : '',
                                        initialized : false,
                                        validate() {
                                            this.initialized = true
                                            if (!this.input) {
                                                this.errorMessage = 'Recipient required'
                                                return false
                                            }
                                            this.errorMessage = ''
                                            return true
                                        }
                                    }"
                                    @modal.window="input = inputs.recipient.value"
                                >
                                <span class="errorMessage"  x-text="errorMessage"></span>
                                <input
                                    x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'recipient', input})"
                                    x-model="input"
                                    x-bind:class="{'error' : errorMessage}"
                                    type="text"
                                    name="recipient"
                                    id="recipient"
                                >
                                <span class="label">Recipient</span>
                                <div
                                @validation="
                                    inputs[$event.detail.field].value = $event.detail.input;
                                    inputs[$event.detail.field].valid = $event.detail.valid;"
                                class="item"
                                x-data="{
                                    input : '',
                                    errorMessage : '',
                                    initialized : false,
                                    validate() {
                                        this.initialized = true
                                        if (!this.input) {
                                            this.errorMessage = 'Supplier required'
                                            return false
                                        }
                                        this.errorMessage = ''
                                        return true
                                    }
                                }"
                                @modal.window="input = inputs.supplier.value"
                            >
                                    <span class="errorMessage"  x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'supplier', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="text"
                                        name="supplier"
                                        id="supplier"
                                    >
                                    <span class="label">Supplier</span>
                                </div>
                                <div @validation="
                                    inputs[$event.detail.field].value = $event.detail.input;
                                    inputs[$event.detail.field].valid = $event.detail.valid;
                                    "
                                    class="item" x-data="{
                                    input : '',
                                    errorMessage : '',
                                    initialized : false,
                                    validate() {
                                        this.initialized = true
                                        if (!this.input) {
                                            this.errorMessage = 'Description required'
                                            return false
                                        }
                                        this.errorMessage = ''
                                        return true
                                        }
                                    }"
                                    @modal.window="input = inputs.description.value"
                                >
                                    <span class="errorMessage" x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'description', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="text"
                                        name="description"
                                        id="description"
                                    >
                                    <span class="label">Description</span>
                                </div>
                                <div
                                    x-show="editAmount"
                                    @validation="
                                    inputs[$event.detail.field].value = $event.detail.input;
                                    inputs[$event.detail.field].valid = $event.detail.valid;
                                    "
                                    class="item"
                                    x-data="{
                                        input : '',
                                        errorMessage : '',
                                        initialized : false,
                                        validate() {
                                            this.initialized = true
                                            if (!this.input) {
                                                this.errorMessage = 'Amount required'
                                                return false
                                            }
                                            if (!Number(this.input)) {
                                                this.errorMessage = 'Number required'
                                                return false
                                            }
                                            if (this.input < 0) {
                                                this.errorMessage = 'Posivite values'
                                                return false
                                            }
                                            if (this.balance - this.input < 0) {
                                                this.errorMessage = 'Insufficient funds'
                                                return false
                                            }
                                            this.errorMessage = ''
                                            return true
                                        }
                                        }"
                                        @modal.window="input = inputs.amount.value"
                                >
                                    <span class="errorMessage" x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'amount', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="number"
                                        name="amount"
                                        id="amount"
                                    >
                                    <span class="label">Amount</span>
                                </div>
                                <div class="item" x-data="{
                                    input : (new Date()).toISOString().split('T')[0],
                                    errorMessage : '',
                                    initialized : false,
                                    validate() {
                                        this.initialized = true
                                        if (!this.input) {
                                            this.errorMessage = 'date required'
                                            return false
                                        }
                                        this.errorMessage = ''
                                        return true
                                    }
                                }"
                                @modal.window="input = inputs.date.value"
                                >
                                    <span class="errorMessage" x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'date', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="date"
                                        name="date"
                                        id="date"
                                    >
                                    <span class="label">Date</span>
                                </div>
                            </div>
                            <div  class="modal-btns">
                                <button class="submit-button" @click="openEditModal =false; swapMain()" type="submit" :disabled="!validateEdit()" >Update</button>
                                <button
                                class="edit-amount"
                                type="button"
                                x-transition:leave.duration.300ms
                                x-show="!editAmount"
                                x-on:click="editAmount = true">
                                    <img src="/static/images/down-arrow.svg" alt="down-arrow" height="10" width="10">
                                    <span>Edit Amount</span>
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        </div>
        <div id="delete-modal"
        x-data="{
            openDeleteModal : false,
            inputsDelete : {
                transaction : '',
                reason : '',
            },
            url : '',
            validateDelete() {
                return (this.inputsDelete.reason) ? true : false
            },
            init() {
                htmx.on('#delete_button', 'click', (event) => {
                    this.openDeleteModal =false
                    this.swapMain()
                    setTimeout(() => {
                        htmx.ajax('POST', this.url, {
                            target: 'main',
                            swap:'outerHTML',
                            values: this.inputsDelete
                        })
                    }, 250);
                })
            }
        }"
        @delete-modal.window="
            openDeleteModal = true;
            inputsDelete.transaction = $event.detail.transaction
            inputsDelete.reason = ''
            url = $event.detail.url
        "
        >
            <div x-show="openDeleteModal" class="overlay">
                <div class="modal"
                @click.outside="openDeleteModal = false"
                >
                    <button class="close-button" @click="openDeleteModal = false">&times;</button>
                    <h2>Delete Transaction</h2>
                    <form>
                        <div class="item"
                        x-data="{
                            input : '',
                            errorMessage : '',
                            initialized : false,
                            validate() {
                                this.initialized = true
                                if (!this.input) {
                                    this.errorMessage = 'reason required'
                                    return false
                                }
                                this.errorMessage = ''
                                return true
                            },
                            clear() {
                                this.input = ''
                                this.errorMessage = ''
                                this.initialized = false
                            }
                        }"
                        @delete-modal.window="clear()"
                        >
                            <span class="errorMessage" x-text="errorMessage"></span>
                            <input
                                type="text"
                                name="reason"
                                x-on:input="validate(); inputsDelete['reason'] = input"
                                x-model="input"
                                x-bind:class="{'error' : errorMessage}"
                            >
                            <span class="label">Reason</span>
                        </div>
                        <button class="submit-button" id="delete_button" type="button" :disabled="!validateDelete()" >
                            Delete
                        </button>

                    </form>
                </div>
            </div>
        </div>
        </div>
        <div id="query-modal"
        x-data="{
            queryGrid : null,
            openQueryModal : false,
            loading : true,
            async queryTransactionHistory(transaction) {
                this.loading = true
                let {transactions} = await (await fetch('/transaction/query/'+transaction.transactionId)).json()
                transactions.push(transaction)
                    if (this.queryGrid) {
                        this.queryGrid.setRowData(transactions)
                        this.queryGrid.refreshCells()
                        this.loading = false
                        return
                    }
                    this.queryGrid = agGrid.createGrid(this.$refs.queryGrid, {
                        rowData : transactions,
                        columnDefs : [
                            { field: 'transactionId', headerName : 'Voucher Number'},
                            { field: 'description'},
                            { field: 'amount' },
                            { field: 'recipient' },
                            { field: 'supplier' },
                            { field: 'createdBy' },
                            { field: 'date' },
                            { field: 'timeStamp' },
                            { field: 'editedBy' },
                            { field: 'editTime'},
                            { field: 'reimbursedBy' },
                            { field: 'reimbursedTime'},
                            { field: 'deletedBy'},
                            { field: 'deletedTime'},
                            { field: 'deleteReason'}
                        ],
                        defaultColDef: {
                            filter: 'agTextColumnFilter',
                            floatingFilter: true,
                        },
                    })
                    this.loading = false
            },
        }"
        @query-modal.window="
        openQueryModal = true
        queryTransactionHistory($event.detail.transaction)
        "
        >
         <div x-show="openQueryModal" class="overlay" >
            <div class="modal" @click.outside="openQueryModal = false">
                <button class="close-button" @click="openQueryModal = false">&times;</button>
                <h2>View Transaction History</h2>
                <div x-show="loading">
                    <span>Loading...</span>
                </div>
                <div x-show="!loading" x-ref="queryGrid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto">
                </div>
            </div>
         </div>
        </div>
        <div id="upload-modal"
        x-data="{
            openUploadModal: false,
            uploadFile: null,
            transactionData: '',
            buttonToggle: false,
            previewImage: null,
            uploadErrorMessage: '',
            fileName: '',
            async uploadFileHandler() {
                try {
                    fetch('/upload/delete', {
                        method: 'POST',
                        headers: {
                            'Content-Type' : 'application/json',
                        },
                        body: JSON.stringify({filename: this.transactionData.filename})
                    })    

                    this.openUploadModal = false
                    this.swapMain()

                    const formData = new FormData();
                    formData.append('file', this.uploadFile)
                    formData.append('transactionId', this.transactionData.transactionId)
                    fetch('/upload', {
                        method : 'POST',
                        body: formData
                    })
                    .then(() => {
                        this.previewImage = null
                    })
                    .then(() => {
                        htmx.ajax('GET', '/reimburse', {
                            target: 'main',
                            swap:'outerHTML'
                        })
                    })

                } catch (error) {
                    console.error('Upload failed:', error);
                    this.uploadErrorMessage = 'Upload failed. Please try again.';
                }
            },

        }"
        @upload-modal.window="
            openUploadModal = true;
            transactionData = $event.detail.transaction;
            previewImage = $event.detail.transaction.imageUrl || '/static/images/noimage.png';

            buttonToggle = false;
            uploadErrorMessage = '';
            uploadFile = null;
        "
        x-init="$watch('uploadFile', uploadFile => {
            fileName = uploadFile?.name;
            if (!uploadFile) {
                $refs.uploadFileInput.value = null
            }
        })"
    >
        <div x-show="openUploadModal" class="overlay">
            <div class="modal" @click.outside="previewImage = null; openUploadModal = false;">

                <button class="close-button" @click="previewImage = null; openUploadModal = false;">&times;</button>

                <h2>Upload File</h2>

                <div class="upload-buttons">
                    <label for="file-upload" id="file-upload-label">Choose File</label>
                    <input id="file-upload" type="file"
                        x-ref="uploadFileInput"
                        @change="uploadFile = $event.target.files[0]; uploadErrorMessage=''; buttonToggle=true;"
                        accept="image/png, image/gif, image/jpeg">
                    <span id="file-upload-name" x-text="fileName"></span>
                    <button type="submit" x-show="buttonToggle" class="submit-button" @click="uploadFileHandler()">Upload</button>
                    <div x-show="uploadErrorMessage" class="error-message" x-text="uploadErrorMessage"></div>
                </div>

                <div class="receipt-container">
                    <img x-bind:src="previewImage" alt="receipt preview" class="receipt-image">
                </div>
                
            </div>
        </div>
        </div>    
    </div>
</main>