<main x-ref="main" class="swappable">
    <div x-data="{
        saveText : 'Save',
        transactionLog : [],
        toBeReimbursed : [],
        saved : [],
        open: false,
        grid : null,
        grid2 : null,
        reimbursedTotal: 0,
        inputs : {
            transactionId : {value: '', valid: true},
            amount :  {value: '', valid: true},
            recipient : {value: '', valid: true},
            description : {value: '', valid: true},
            date : {value: (new Date()).toISOString().split('T')[0], valid: true},
            originalAmount :  {value: '', valid: true},
        },
        validate() {
            let keys = Object.keys(this.inputs)
            for (let key of keys) {
                if (!this.inputs[key].valid) {
                    return false
                }
            }
            return true
        },
        async init(){
            let alpineObj = this
            const editRenderer = function(params) {
                const button = document.createElement('button');
                button.innerHTML = 'Edit';
                button.classList.add('edit-button');
                button.addEventListener('click', function () {
                    alpineObj.open = true
                    alpineObj.inputs.transactionId.value = params.data.transactionId;
                    alpineObj.inputs.recipient.value = params.data.recipient;
                    alpineObj.inputs.description.value = params.data.description;
                    alpineObj.inputs.originalAmount.value = params.data.amount;
                    $dispatch('modal')
                });
                return button;
            }
            let {transactions} = (await (await fetch('/transactions')).json())
            let {savedOnAccount} = (await (await fetch('/saved')).json())
            this.saved = savedOnAccount
            this.grid = agGrid.createGrid(this.$refs.myGrid, {
                rowData : transactions,
                domLayout: 'autoHeight',
                components: {editRenderer: editRenderer,},
                columnDefs : [
                    { field: 'transactionId', 
                    checkboxSelection: true, 
                    headerCheckboxSelectionFilteredOnly:true, 
                    headerCheckboxSelection: true,
                    headerName : 'Voucher Number'},
                    { field: 'description'},
                    { field: 'amount' },
                    { field: 'recipient' },
                    { field: 'createdBy' },
                    { field: 'date'},
                    {
                        field: 'Actions',
                        headerName: 'Edit',
                        cellRenderer: 'editRenderer',
                        minWidth: 100,
                        maxWidth: 100,
                        suppressMenu: true,
                        cellStyle: { textAlign: 'center' }
                                },
                            ],
                defaultColDef: {
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                },
                rowSelection: 'multiple',
                onRowSelected: (event) => {
                    this.saveText = 'Save'
                    if (event.node.isSelected()) {
                        this.toBeReimbursed.push(event.node.data);
                        this.reimbursedTotal = this.reimbursedTotal + Number(event.node.data.amount);
                        this.grid2.setRowData([...this.toBeReimbursed, {description: 'Total', amount : this.reimbursedTotal}])
                        this.grid2.refreshCells()
                        return
                    }

                    const index = this.toBeReimbursed.indexOf(event.node.data);
                    if (index < 0) {
                        return
                    }
                    this.toBeReimbursed.splice(index, 1);
                    this.reimbursedTotal = this.reimbursedTotal - Number(event.node.data.amount);
                    let toBeReimbursed = [...this.toBeReimbursed]
                    if (this.reimbursedTotal > 0) {
                        toBeReimbursed.push({description: 'Total', amount : this.reimbursedTotal})
                    }
                    this.grid2.setRowData(toBeReimbursed);
                    this.grid2.refreshCells()
                },
                onFirstDataRendered : (params) => {
                    const selectedNodes = []
                    let saved = this.saved.map(id => Number(id)).sort((a,b) => a-b)
                    console.log(saved)
                    let currentIndex = 0
                    params.api.forEachNode((node) => {
                        let id = node.data.transactionId
                        while (id > saved[currentIndex] && currentIndex < saved.length) {
                            ++currentIndex
                        }
                        if (id == saved[currentIndex]){
                            selectedNodes.push(node)
                            ++currentIndex
                            return
                        }
                        if (id < saved[currentIndex]){
                            return
                        }
                    })
                    params.api.setNodesSelected({ nodes : selectedNodes,  newValue : true})
                },
            })
            let account = this.currAccount
            this.grid2 = agGrid.createGrid(this.$refs.myGrid2, {
                rowData : this.toBeReimbursed,
                domLayout: 'autoHeight',
                columnDefs : [
                    { field: 'description'},
                    { field: 'amount' },
                    {field: 'transactionId', headerName : 'Voucher Number'},
                    { field: 'recipient' },
                    { field: 'createdBy' },
                    { field: 'date'},
                    {headerName: 'Account', valueGetter: function (params) {
                        return account 
                    },}
                ],
                defaultColDef: {
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                },
                getRowStyle: function(params) {
                    if (params.node.rowIndex === params.api.getDisplayedRowCount() - 1) {
                        return { fontWeight: 'bold'}
                    }
                    return null;
                },
            })
    
            htmx.on('#reimburse_button', 'click', (event) => {
                this.swapMain()
                setTimeout(() => {
                    htmx.ajax('POST', '/reimburseBalance', {
                        target: 'main', 
                        swap:'outerHTML', 
                        values:{
                            toBeReimbursed: JSON.stringify(this.toBeReimbursed),
                            reimbursedTotal : this.reimbursedTotal,
                        } 
                    })
                }, 250);
            })

        },
        exportTableAsCsv() {
            const processCellCallback = (params) => {
                if (params.column.getId() === 'transactionId' ){
                    if (params.value){
                        return 'VR' + params.value
                    }
                    return
                }
                return params.value
            }
            this.grid2.exportDataAsCsv({processCellCallback})
        },
        save() {
            let toSave = this.toBeReimbursed.map(node => node.transactionId)
            fetch('/saved', {
                method: 'POST',
                headers: {
                    'Content-Type' : 'application/json',
                },
                body: JSON.stringify({toSave})
            }).then((data) => {
                this.saveText = 'âœ“' + ' Saved'
            })
        }
    }">
        <div class="reimburse_container">
            <div class="section1">
                <h2>Current Transactions</h2>
                <div x-ref="myGrid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto"></div>
            </div>
            <div class="section2">
                    <div>
                        <div class="title" >
                            <h2>Reimbursements</h2>
                            <div class="title_btns">
                                <button type="button" class="export_btn" @click="exportTableAsCsv()">
                                    <img src="/static/images/download.svg" alt="download button" height="25" width="25">
                                </button>
                                <button type="button" class="reverse" @click="save()" x-text="saveText"></button>
                            </div>
                        </div>
                        <div x-ref="myGrid2" id="myGrid2" class="table ag-theme-quartz ag-center-cols-viewport"></div>
                        <div class="table_btns" x-show="toBeReimbursed.length > 0">
                            <button id="reimburse_button" class="reverse" type="button">Reimburse</button>
                        </div>
                    </div>
            </div>
        </div>
        <div 
            x-show="open" 
            x-data="{ balance: 1000000}" 
            x-init=" fetch('/balance').then(data => data.json()).then(json => balance = json.balance)"
            @modal.window="balance += Number(inputs.originalAmount.value)"
            >
            <div class="overlay">
                <div class="modal" @click.outside="open = false">
                    <button class="close-button" @click="open = false">&times;</button>
                    <h2> Edit Transaction </h2>
                    <div x-data="{
                        editAmount: false,
                        formatDollar(number) {
                            return new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency : 'USD',
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0,
                            }).format(number)
                        }
                    }" 
                    @modal.window="editAmount=false"
                    >
                        <div class="amount-box" x-show="editAmount" x-transition:enter.delay.300ms.duration.300ms>
                            <div class="amount"><div>New Balance </div> <span style="color: green;"  x-text="formatDollar(balance)" ></span></div>
                            <div class="amount"><div>New Amount </div> <span style="color: red;" x-text="formatDollar(Math.abs(inputs.amount.value) || 0)"></span></div>
                            <div class="amount"><div>New Remainder </div> <span  x-text="formatDollar(balance - inputs.amount.value)" ></span></div>
                        </div>
        
                        <form :class="{'movedown' : editAmount}" hx-post="/editBalance" hx-target="main" hx-trigger="submit delay:0.25s">
                            <div class="transaction-form">
                                <div class="item">
                                    <span class="errorMessage"></span>
                                    <input type="text" readonly name="transactionId" id="transactionId" x-model="inputs.transactionId.value">
                                    <span class="label"> Transaction Id</span>
                                </div>
                                <div
                                    @validation="
                                        inputs[$event.detail.field].value = $event.detail.input;
                                        inputs[$event.detail.field].valid = $event.detail.valid;"
                                    class="item"
                                    x-data="{
                                        input : '',
                                        errorMessage : '',
                                        initialized : false,
                                        validate() {
                                            this.initialized = true
                                            if (!this.input) {
                                                this.errorMessage = 'Recipient required'
                                                return false
                                            }
                                            this.errorMessage = ''
                                            return true
                                        }
                                    }"
                                    @modal.window="input = inputs.recipient.value"
                                >
                                    <span class="errorMessage"  x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'recipient', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="text"
                                        name="recipient"
                                        id="recipient"
                                    >
                                    <span class="label">Recipient</span>
                                </div>
                                <div @validation="
                                    inputs[$event.detail.field].value = $event.detail.input;
                                    inputs[$event.detail.field].valid = $event.detail.valid;
                                    "
                                    class="item" x-data="{
                                    input : '',
                                    errorMessage : '',
                                    initialized : false,
                                    validate() {
                                        this.initialized = true
                                        if (!this.input) {
                                            this.errorMessage = 'Description required'
                                            return false
                                        }
                                        this.errorMessage = ''
                                        return true
                                        }
                                    }"
                                    @modal.window="input = inputs.description.value"
                                >
                                    <span class="errorMessage" x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'description', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="text"
                                        name="description"
                                        id="description"
                                    >
                                    <span class="label">Description</span>
                                </div>
                                <div
                                    x-show="editAmount"
                                    @validation="
                                    inputs[$event.detail.field].value = $event.detail.input;
                                    inputs[$event.detail.field].valid = $event.detail.valid;
                                    "
                                    class="item"
                                    x-data="{
                                        input : '',
                                        errorMessage : '',
                                        initialized : false,
                                        validate() {
                                            this.initialized = true
                                            if (!this.input) {
                                                this.errorMessage = 'Amount required'
                                                return false
                                            }
                                            if (!Number(this.input)) {
                                                this.errorMessage = 'Number required'
                                                return false
                                            }
                                            if (this.input < 0) {
                                                this.errorMessage = 'Posivite values'
                                                return false
                                            }
                                            if (this.balance - this.input < 0) {
                                                this.errorMessage = 'Insufficient funds'
                                                return false
                                            }
                                            this.errorMessage = ''
                                            return true
                                        }
                                        }"
                                        @modal.window="input = inputs.amount.value"
                                >
                                    <span class="errorMessage" x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'amount', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="number"
                                        name="amount"
                                        id="amount"
                                    >
                                    <span class="label">Amount</span>
                                </div>
                                <div class="item" x-data="{
                                    input : (new Date()).toISOString().split('T')[0],
                                    errorMessage : '',
                                    initialized : false,
                                    validate() {
                                        this.initialized = true
                                        if (!this.input) {
                                            this.errorMessage = 'date required'
                                            return false
                                        }
                                        this.errorMessage = ''
                                        return true
                                    }
                                }"
                                @modal.window="input = inputs.date.value"
                                >
                                    <span class="errorMessage" x-text="errorMessage"></span>
                                    <input
                                        x-on:input="let valid = validate(); $dispatch('validation', {valid, field : 'date', input})"
                                        x-model="input"
                                        x-bind:class="{'error' : errorMessage}"
                                        type="date"
                                        name="date"
                                        id="date"
                                    >
                                    <span class="label">Date</span>
                                </div>
                            </div>
                            <button class="submit-button" @click="open =false; swapMain()" type="submit" :disabled="!validate()" >Update</button>
                            <button class="reverse-button" type="button" x-transition:leave.duration.300ms x-show="!editAmount" x-on:click="editAmount = true">Edit Amount</button>
                        </form>
                    </div>
        
        </div>
    </div>
</main>