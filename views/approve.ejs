<main x-ref="main" class="swappable poppins-general" >
    <div x-data="{
        grid : null,
        transactions: [],
        async init() {
            let alpineObj = this
            const actionRenderer = function(params) {
                let transaction = params.data
                const container = document.createElement('div');
                container.classList.add('action-container');

                if (transaction.timeStamp) {
                    const queryButton= document.createElement('button')
                    queryButton.classList.add('action-button')
                    queryButton.title = 'Query'
                    const icon = document.createElement('i')
                    icon.classList.add('fa-solid')
                    icon.classList.add('fa-question')
                    queryButton.appendChild(icon)
                    queryButton.addEventListener('click', () => {
                        $dispatch('query-modal', {transaction})
                    })

                    container.appendChild(queryButton)
                }

                if (transaction) {
                    const deleteButton = document.createElement('button')
                    deleteButton.classList.add('action-button')
                    deleteButton.title = 'Delete'
                    const icon = document.createElement('i')
                    icon.classList.add('fa-solid')
                    icon.classList.add('fa-xmark')
                    deleteButton.appendChild(icon)
                    deleteButton.addEventListener('click', () => {
                        $dispatch('delete-modal', {transaction, url : '/transaction/delete'});
                    })

                    container.appendChild(deleteButton)
                }

                if (transaction) {
                    const approveButton = document.createElement('button')
                    approveButton.classList.add('action-button')
                    approveButton.title = 'Approve'
                    const icon = document.createElement('i')
                    icon.classList.add('fa-solid')
                    icon.classList.add('fa-check')
                    approveButton.appendChild(icon)
                    approveButton.addEventListener('click', () => {

                        icon.classList.remove('fa-check')
                        icon.classList.add('fa-circle-notch')
                        icon.classList.add('fa-spin')

                        let rowIndex = params.rowIndex
                        fetch('/transaction/approve', {
                            method: 'POST',
                            headers: {
                                'Content-Type' : 'application/json',
                            },
                            body: JSON.stringify({transactionId : alpineObj.transactions[rowIndex].transactionId})
                        }).then((_) => {
                                alpineObj.transactions.splice(rowIndex, 1)
                                alpineObj.grid.setRowData(alpineObj.transactions)
                                alpineObj.grid.refreshCells()
                        })
                })

                    container.appendChild(approveButton)
                }

                return container;
            }

            let {transactions} = (await (await fetch('/transactions')).json())
            this.transactions = transactions.filter((transaction) => !transaction.approved)
            this.grid = agGrid.createGrid(this.$refs.grid, {
                rowData : this.transactions,
                domLayout: 'autoHeight',
                components: {actionRenderer},
                columnDefs : [
                    {
                        field : 'Actions',
                        headerName : 'Actions',
                        cellRenderer: 'actionRenderer',
                        maxWidth: 100,
                        suppressMenu: true,
                        cellStyle: { textAlign: 'center' }
                    },
                    { field: 'transactionId', headerName : 'Voucher Number'},
                    { field: 'description'},
                    { field: 'amount' },
                    {headerName: 'Tax', valueGetter: function (params) {
                        if (params.data.taxable){
                            return params.data.tax
                        }
                        return null 
                    },},
                    { field: 'recipient' },
                    { field: 'supplier' },
                    { field: 'createdBy' },
                    { field: 'date'},
                    { field: 'timeStamp' }
                    
                ],
                defaultColDef: {
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                },
            })
        }
        }" >
        <div class="title">
            <h2><span x-text="accountTextMap[currAccount]"></span> Transactions To Approve </h2>
            <div class="title_btns">
                <button type="button" class="export_btn" @click="exportTableAsCsv()">
                    <img src="/static/images/download.svg" alt="download button" height="25" width="25">
                </button>
            </div>
        </div>
        <div x-ref="grid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto"></div>


        <div x-data="{
            openDeleteModal : false,
            inputsDelete : {
                transaction : '',
                reason : '',
                source : 'approve',
            },
            url : '',
            validateDelete() {
                return (this.inputsDelete.reason) ? true : false
            },
            init() {
                htmx.on('#delete_button', 'click', (event) => {
                    this.openDeleteModal =false
                    this.swapMain()
                    setTimeout(() => {
                        htmx.ajax('POST', this.url, {
                            target: 'main',
                            swap:'outerHTML',
                            values: this.inputsDelete
                        })
                    }, 300);
                })
            }
        }"
        @delete-modal.window="
            openDeleteModal = true;
            inputsDelete.transaction = $event.detail.transaction
            inputsDelete.reason = ''
            url = $event.detail.url
        "
        >
            <div x-show="openDeleteModal" class="overlay">
                <div
                class="modal"
                @click.outside="openDeleteModal = false"
                >
                    <button class="close-button" @click="openDeleteModal = false">&times;</button>
                    <h2>Delete Transaction</h2>
                    <form>
                        <div class="item"
                        x-data="{
                            input : '',
                            errorMessage : '',
                            initialized : false,
                            validate() {
                                this.initialized = true
                                if (!this.input) {
                                    this.errorMessage = 'reason required'
                                    return false
                                }
                                this.errorMessage = ''
                                return true
                            },
                            clear() {
                                this.input = ''
                                this.errorMessage = ''
                                this.initialized = false
                            }
                        }"
                        @delete-modal.window="clear()"
                        >
                            <span class="errorMessage" x-text="errorMessage"></span>
                            <input
                                type="text"
                                name="reason"
                                x-on:input="validate(); inputsDelete['reason'] = input"
                                x-model="input"
                                x-bind:class="{'error' : errorMessage}"
                            >
                            <span class="label">Reason</span>
                        </div>
                        <button class="submit-button" id="delete_button" type="button" :disabled="!validateDelete()" >
                            Delete
                        </button>

                    </form>
                </div>
            </div>
        </div>
        <div id="query-modal"
        x-data="{
            queryGrid : null,
            openQueryModal : false,
            loading : true,
            async queryTransactionHistory(transaction) {
                this.loading = true
                let {transactions} = await (await fetch('/transaction/query/'+transaction.transactionId)).json()
                transactions.push(transaction)
                    if (this.queryGrid) {
                        this.queryGrid.setRowData(transactions)
                        this.queryGrid.refreshCells()
                        this.loading = false
                        return
                    }
                    this.queryGrid = agGrid.createGrid(this.$refs.queryGrid, {
                        rowData : transactions,
                        columnDefs : [
                            { field: 'transactionId', headerName : 'Voucher Number'},
                            { field: 'description'},
                            { field: 'amount' },
                            {headerName: 'Tax', valueGetter: function (params) {
                                if (params.data.taxable){
                                    return params.data.tax
                                }
                                return null 
                            },},
                            { field: 'recipient' },
                            { field: 'supplier' },
                            { field: 'createdBy' },
                            { field: 'date' },
                            { field: 'timeStamp' },
                            { field: 'editedBy' },
                            { field: 'editTime'},
                            { field: 'reimbursedBy' },
                            { field: 'reimbursedTime'},
                            { field: 'deletedBy'},
                            { field: 'deletedTime'},
                            { field: 'deleteReason'}
                        ],
                        defaultColDef: {
                            filter: 'agTextColumnFilter',
                            floatingFilter: true,
                        },
                    })
                    this.loading = false
            },
        }"
        @query-modal.window="
        openQueryModal = true
        queryTransactionHistory($event.detail.transaction)
        "
        >
         <div x-show="openQueryModal" class="overlay" >
            <div class="modal" @click.outside="openQueryModal = false">
                <button class="close-button" @click="openQueryModal = false">&times;</button>
                <h2>View Transaction History</h2>
                <div x-show="loading">
                    <span>Loading...</span>
                </div>
                <div x-show="!loading" x-ref="queryGrid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto; overflow-y: scroll;">
                </div>
            </div>
         </div>
        </div>
    </div>
</main>