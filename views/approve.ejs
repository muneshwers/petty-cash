<main x-ref="main" class="swappable" >
    <div x-data="{
        grid : null,
        transactions: [],
        openDeleteModal : false,
        async init() {
            let alpineObj = this
            const approveRenderer = function(params) {
                let flexbox = document.createElement('div')
                flexbox.classList.add('flex-container')

                const approveButton = document.createElement('button');
                approveButton.innerHTML = 'Approve';
                approveButton.classList.add('edit-button');
                approveButton.addEventListener('click', function () {
                    let rowIndex = params.rowIndex
                    this.innerHTML = 'Loading...'
                    fetch('/approve', {
                        method: 'POST',
                        headers: {
                            'Content-Type' : 'application/json',
                        },
                        body: JSON.stringify({transactionId : alpineObj.transactions[rowIndex].transactionId})
                    }).then((_) => {
                            alpineObj.transactions.splice(rowIndex, 1)
                            alpineObj.grid.setRowData(alpineObj.transactions)
                            alpineObj.grid.refreshCells()
                    })
                })
                flexbox.appendChild(approveButton)

                const deleteButton = document.createElement('button')
                deleteButton.innerHTML = 'Delete'
                deleteButton.classList.add('edit-button')
                deleteButton.addEventListener('click', function() {
                    $dispatch('delete-modal', {transaction : params.data, url : '/transaction/delete'})
                })
                flexbox.appendChild(deleteButton)

                return flexbox
            }
            let {transactions} = (await (await fetch('/transactions')).json())
            this.transactions = transactions.filter((transaction) => !transaction.approved)
            console.log(transactions)
            this.grid = agGrid.createGrid(this.$refs.grid, {
                rowData : this.transactions,
                domLayout: 'autoHeight',
                components: {approveRenderer},
                columnDefs : [
                    {
                    field: 'Actions',
                    headerName: 'Actions',
                    cellRenderer: 'approveRenderer',
                    minWidth: 150,
                    suppressMenu: true,
                    cellStyle: { textAlign: 'center' }
                    },
                    { field: 'transactionId', headerName : 'Voucher Number'},
                    { field: 'description'},
                    { field: 'amount' },
                    { field: 'recipient' },
                    { field: 'supplier' },
                    { field: 'createdBy' },
                    { field: 'date'},
                    
                ],
                defaultColDef: {
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                },
            })
        }
        }" >
        <div class="title">
            <h2> Transactions To Approve </h2>
            <div class="title_btns">
                <button type="button" class="export_btn" @click="exportTableAsCsv()">
                    <img src="/static/images/download.svg" alt="download button" height="25" width="25">
                </button>
            </div>
        </div>
        <div x-ref="grid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto"></div>


        <div x-data="{
            openDeleteModal : false,
            inputsDelete : {
                transaction : '',
                reason : '',
            },
            url : '',
            validateDelete() {
                return (this.inputsDelete.reason) ? true : false
            },
            init() {
                htmx.on('#delete_button', 'click', (event) => {
                    console.log(this.inputsDelete)
                    this.openDeleteModal =false
                    this.swapMain()
                    setTimeout(() => {
                        htmx.ajax('POST', this.url, {
                            target: 'main',
                            swap:'outerHTML',
                            values: this.inputsDelete
                        })
                    }, 250);
                })
            }
        }"
        @delete-modal.window="
            openDeleteModal = true;
            inputsDelete.transaction = $event.detail.transaction
            url = $event.detail.url
            reason = ''
        "
        >
            <div x-show="openDeleteModal" class="overlay">
                <div
                class="modal"
                @click.outside="openDeleteModal = false"
                >
                    <button class="close-button" @click="openDeleteModal = false">&times;</button>
                    <h2>Delete Transaction</h2>
                    <form>
                        <div class="item"
                        x-data="{
                            input : '',
                            errorMessage : '',
                            initialized : false,
                            validate() {
                                this.initialized = true
                                if (!this.input) {
                                    this.errorMessage = 'reason required'
                                    return false
                                }
                                this.errorMessage = ''
                                return true
                            },
                            clear() {
                                this.input = ''
                                this.errorMessage = ''
                                this.initialized = false
                            }
                        }"
                        @delete-modal.window="clear()"
                        >
                            <span class="errorMessage" x-text="errorMessage"></span>
                            <input
                                type="text"
                                name="reason"
                                x-on:input="validate(); inputsDelete['reason'] = input"
                                x-model="input"
                                x-bind:class="{'error' : errorMessage}"
                            >
                            <span class="label">Reason</span>
                        </div>
                        <button class="submit-button" id="delete_button" type="button" :disabled="!validateDelete()" >
                            Delete
                        </button>

                    </form>
                </div>
            </div>
        </div>
    </div>
</main>