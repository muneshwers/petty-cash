<main x-ref="main" class="swappable">
    <div x-data="{
        transactionLog : [],
        grid : null,
        async init(){
            const queryRender = function(params) {
                if (!params.data.timeStamp){
                    return
                }
                const queryButton = document.createElement('button')
                queryButton.innerHTML = '?'
                queryButton.classList.add('query-button')
                queryButton.addEventListener('click', function () {
                    $dispatch('query-modal', {transaction : params.data})
                })
                return queryButton
            }
            let {transactionHistory} = (await (await fetch('/transactionHistory')).json())
            let account = this.accountTextMap[this.currAccount]
            this.grid = agGrid.createGrid(this.$refs.myGrid, {
                rowData : transactionHistory,
                components: {queryRender},
                domLayout: 'autoHeight',
                columnDefs : [
                    {
                        field : 'Query',
                        headerName : 'Query',
                        cellRenderer: 'queryRender',
                        maxWidth: 85,
                        suppressMenu: true,
                        cellStyle: { textAlign: 'center' }
                    },
                    { field: 'transactionId', headerName : 'Voucher Number'},
                    { field: 'description'},
                    { field: 'amount' },
                    { field: 'recipient' },
                    { field: 'supplier' },
                    { field: 'createdBy' },
                    { field: 'date' },
                    { field: 'timeStamp' },
                    { headerName: 'Account', 
                        valueGetter: function (params) {
                            return account 
                        },
                    },
                    { field: 'editedBy' },
                    { field: 'editTime'},
                    { field: 'reimbursedBy' },
                    { field: 'reimbursedTime'},
                    { field: 'deletedBy'},
                    { field: 'deletedTime'},
                    { field: 'deleteReason'}
                ],
                defaultColDef: {
                    filter: 'agTextColumnFilter',
                    floatingFilter: true,
                },
            })

        },
        exportTableAsCsv() {
            let account = this.currAccount
            let accountToCodeMap = {
                muneshwers : 'ML',
                barges : 'BS',
                paragon : 'PT'
            }
            let code = accountToCodeMap[account]
            const processCellCallback = (params) => {
                if (params.column.getId() === 'transactionId' ){
                    if (params.value){
                        return code + params.value
                    }
                    return
                }
                return params.value
            }
            this.grid.exportDataAsCsv({processCellCallback})
        },

    }">
        <div class="title">
            <h2>All Transactions</h2>
            <div class="title_btns">
                <button type="button" class="export_btn" @click="exportTableAsCsv()">
                    <img src="/static/images/download.svg" alt="download button" height="25" width="25">
                </button>
            </div>
        </div>
        <div x-ref="myGrid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto"></div>
        <div id="query-modal"
        x-data="{
            queryGrid : null,
            openQueryModal : false,
            loading : true,
            async queryTransactionHistory(transaction) {
                this.loading = true
                let {transactions} = await (await fetch('/transaction/query/'+transaction.transactionId)).json()
                    if (this.queryGrid) {
                        this.queryGrid.setRowData(transactions)
                        this.queryGrid.refreshCells()
                        this.loading = false
                        return
                    }
                    this.queryGrid = agGrid.createGrid(this.$refs.queryGrid, {
                        rowData : transactions,
                        columnDefs : [
                            { field: 'transactionId', headerName : 'Voucher Number'},
                            { field: 'description'},
                            { field: 'amount' },
                            { field: 'recipient' },
                            { field: 'supplier' },
                            { field: 'createdBy' },
                            { field: 'date' },
                            { field: 'timeStamp' },
                            { field: 'editedBy' },
                            { field: 'editTime'},
                            { field: 'reimbursedBy' },
                            { field: 'reimbursedTime'},
                            { field: 'deletedBy'},
                            { field: 'deletedTime'},
                            { field: 'deleteReason'}
                        ],
                        defaultColDef: {
                            filter: 'agTextColumnFilter',
                            floatingFilter: true,
                        },
                    })
                    this.loading = false
            },
        }"
        @query-modal.window="
        openQueryModal = true
        queryTransactionHistory($event.detail.transaction)
        "
        >
         <div x-show="openQueryModal" class="overlay" >
            <div class="modal" @click.outside="openQueryModal = false">
                <button class="close-button" @click="openQueryModal = false">&times;</button>
                <h2>View Transaction History</h2>
                <div x-show="loading">
                    <span>Loading...</span>
                </div>
                <div x-show="!loading" x-ref="queryGrid" class="table ag-theme-quartz ag-center-cols-viewport" style="width: auto">
                </div>
            </div>
         </div>
        </div>
    </div>
</main>